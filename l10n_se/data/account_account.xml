<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data>
        <record id="lonjournal" model="account.journal">
            <field name="name">Lönejournal</field>
            <field name="code">LÖN</field>
            <field name="type">general</field>
            <field name="default_debit_account_id" search="[('code', '=', '7210')]" model="account.account" />
            <field name="default_crebit_account_id" search="[('code', '=', '7210')]" model="account.account" />
        </record>
        <record id="set_account_type" model="ir.actions.server">
            <field name="name">Set Account Type</field>
            <field name="model_id" ref="base.model_ir_actions_server"/>
            <field name="state">code</field>
            <field name="code">r_list = []
t_list = []
def set_type():
    for o in env['account.account.type'].search([('account_range', '!=', False)]):
        for account in o.get_account_range():
            if o.type in ['payable', 'receivable'] and not account.reconcile:
                try:
                    account.write({'reconcile': True})
                except:
                    if account not in r_list:
                        r_list.append(account)
            try:
                account.write({'user_type_id': o.id})
            except:
                if account not in t_list:
                    t_list.append(account)
set_type()
env['account.account.type']._change_name()
if len(r_list) &gt; 0 or len(t_list) &gt; 0:
    msg = 'Problem to set account type:\n'
    if len(r_list) &gt; 0:
        msg += 'Set reconcile:\n%s' %'\t'.join(r_list)
    if len(t_list) &gt; 0:
        msg += 'Set type:\n%s' %'\t'.join(t_list)
    raise Warning(msg)</field>
        </record>
        
        <record id="update_account_account" model="ir.actions.server">
            <field name="name">Uppdatera kontoplan</field>
            <field name="model_id" ref="base.model_ir_actions_server"/>
            <field name="state">code</field>
            <field name="code">for template in env['account.account.template'].search([]):
    account = env['account.account'].search([('code', '=', template.code)])
    if not account:
        env['account.account'].create({
            'name': template.name,
            'code': template.code,
            'user_type_id': template.user_type_id.id,
            'note': template.note,
        })
    else:
        account.write({
            'name': template.name,
            'code': template.code,
            'user_type_id': template.user_type_id.id,
            'note': template.note,
        })
            </field>
        </record>
       <record id="action_reconcile_account_move_line" model="ir.actions.server">
            <field name="name">Force reconcile</field>
            <field name="model_id" ref="account.model_account_move_line"/>
            <field name="state">code</field>
            <field name="code"></field>
        </record>
       <record id="action_without_attachment_account_move" model="ir.actions.server">
            <field name="name">Untrackable Transactions</field>
            <field name="model_id" ref="account.model_account_move"/>
            <field name="state">code</field>
            <field name="code">move_ids = context.get('active_ids', [])
untrackable_move_ids = []
attach_obj = env['ir.attachment']
invoice_obj = env['account.invoice']
voucher_obj = env['account.voucher']
for move in move_ids:
    attachment = attach_obj.search([('type', '=', 'binary'), ('res_model', '=', 'account.move'), ('res_id', '=', move)])
    invoice = invoice_obj.search([('move_id', '=', move)])
    voucher = voucher_obj.search([('move_id', '=', move)])
    move_obj = env['account.move'].browse(move)
    if not attachment and not invoice and not voucher and not move_obj.payment_order_id:
        untrackable_move_ids.append(move)
action = {
    'name': 'Untrackable Entries',
    'type': 'ir.actions.act_window',
    'res_model': 'account.move',
    'view_type': 'form',
    'view_mode': 'tree,form',
    'domain': [('id', 'in', untrackable_move_ids)],
    'target': 'current',
    'limit': 50000,
    'context': {},
}
</field>
        </record>
        <record id="ir_values_without_attachment_account_move" model="ir.actions.server">
            <field name="model_id" ref="account.model_account_move" />
            <field name="name">Untrackable Transactions</field>
            <field name="state">code</field>
            <field name="code">action = model.action_without_attachment_account_move()</field>
        </record>
    </data>
</odoo>
